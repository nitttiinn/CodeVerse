// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defining the User Role
enum UserRole {
  USER
  ADMIN
  CREATOR
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  COMPILATION_ERROR
  RUNTIME_ERROR
  TIME_LIMIT_EXCEEDED
  INTERNAL_ERROR
}

enum TestCaseStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  COMPILATION_ERROR
}

// Defining the User Model
model User {
  id                         String    @id @default(uuid())
  email                      String    @unique
  name                       String?
  username                   String    @unique
  bio                        String?
  image                      String?
  password                   String?
  role                       UserRole  @default(USER)
  isVerified                 Boolean   @default(false)
  verificationToken          String?   @unique
  refreshToken               String?
  verificationTokenExpiresAt DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  problems      Problem[]
  submissions   Submission[]
  problemSolved ProblemSolved[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String     @unique
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editiorial         String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
  solvedBy   ProblemSolved[]
}

model Submission {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        SubmissionStatus // Accepted, wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String         @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        TestCaseStatus
  memory        String?
  time          String?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
